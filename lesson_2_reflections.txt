**What happens when you initialize a repository? Why do you need to do it?

    This starts tracking the directory you initialised git on & will show any 
    files within as "untracked", due to the fact that you haven't committed 
    any changes yet.
    You need to do this so you can start tracking & committing changes to files.


**How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area is the bit inbetween the working directory & the repository.
    Any files that you're going to want to commit from the working directory, 
    need to get added to this staging area before being able to do so.
    The benefit of this is that it allows you to review exactly what files 
    you're going to want to commit, before doing so.


**How can you use the staging area to make sure you have one commit per logical change?

    By using "git diff" without any arguments to check what changes you have made 
    between the working directory & the staging area. If you see that a logical 
    change has been made, commit it.


**What are some situations when branches would be helpful in keeping your history organized? How would branches help?

    Branches are helpful when you want to make some experimental changes to a file, 
    without affecting the master branch/main version. This way, you can easily jump 
    between branches that you've named yourself & commit changes there, without 
    disrupting any versions you've committed in the other branches.


**How do the diagrams help you visualize the branch structure?

    It makes it easier on the eye to see a simple linear structure showing how, 
    each branch can go it's own way & how commits are stored in the file's history.


**What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    This will combine all the changes that want to be kept between the branches & 
    now allow you to continue on the branch you were checked out on when doing the 
    merge, whilst having all the added/deleted features you wanted.


**What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    If there are changes made that don't conflict, it makes the process a lot 
    faster, rather than going into the file yourself and choosing every single 
    line to merge or not to merge.
    The con is that you may want to do it manually for some reason.