**When would you want to use a remote repository rather than keeping all your work local?

  When you want to publish your code for other people to see & add to.
  This allows you to get valuable feedback or other versions of the same 
  thing you're working on, allowing you to work with multiple people on 
  the same project.


**Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

  Because you want to keep control of what you publish & don't publish.
  A file you're working on may also be un-finished, so you wouldn't want 
  to sync a potentially corrupt file.


**Describe the differences between forks, clones, and branches. When would you use one instead of another?

  Clones - When you copy a repository locally or from GitHub to your local computer, 
  that's classified as a clone.

  Branches - When you create a different version of the same file, without affecting 
  the main file, that's a branch.

  Forks - When you copy a repository on GitHub to GitHub, that's a fork. Essentially 
  it's exactly the same as cloning a repository, just that it's all done on the 
  GitHub servers.


**What is the benefit of having a copy of the last known state of the remote stored locally?

  If you're going offline for a while i.e. catching a flight for example, this 
  will allow you to check what changes have been made to the remote whilst you 
  were gone by simply running git log or git diff.


**How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

  If I had to choose something else, I guess I would have to say something like 
  DropBox or Google OneDrive. The thing that would make those mediums harder for 
  collaboration though, is the fact that version control would be a lot more 
  difficult & you could potentially accidentally auto-save a file that contains 
  incomplete code. 
  Due to this, I believe it would be a lot easier to use Git & GitHub for 
  version control & collaboration.


**When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

  When you're working on an experimental feature or simply want to make changes 
  to a file without affecting the main "production quality" branch. It also 
  means you can make changes to a file that has multiple contributors, without 
  having to worry about something suddenly changing from under your feet & vice 
  versa.
  On the other hand, if you're working on a small project or something that doesn't 
  have various different contributors, you can edit directly on the master branch, 
  which will make things a bit more straightforward as you won't need to merge 
  separate branches together.